<?php
	//excel 导出工具
	
	//导出单一sheet的excel
	function exportExcel(
		$objExcel,//excel处理对象
		$objWriter,//excel输出对象
		$title='',
		$column='',
		$columnCn='',
		$sheet='',
		$array
	){
		//设置文档基本属性 
		//$objProps = $objExcel->getProperties(); 
		//$objProps->setCreator("SQ"); 
		//$objProps->setLastModifiedBy("SQ"); 
		//$objProps->setTitle("Office XLS Test Document"); 
		//$objProps->setSubject("Office XLS Test Document, Demo"); 
		//$objProps->setDescription("Test document, generated by PHPExcel."); 
		//$objProps->setKeywords("office excel PHPExcel"); 
		//$objProps->setCategory("Test"); 
		
		//设置当前的sheet索引，用于后续的内容操作。 
		//一般只有在使用多个sheet的时候才需要显示调用。 
		//缺省情况下，PHPExcel会自动创建第一个sheet被设置SheetIndex=0 
		$objExcel->setActiveSheetIndex(0); 
		$objActSheet = $objExcel->getActiveSheet();
		//设置当前活动sheet的名称 
		$objActSheet->setTitle($sheet); 
	   
		//列名字段名称集合
		$colNameArray = explode(",",$columnCn);
		//列名字段key集合
		$colKeyArray = explode(",",$column);
		//列数
		$colNum = count($colKeyArray);
		//行数
		$rowNum = count($array)+2;
		
		$colLetter = getLetterByNum($colNum-1);
		
		//单元格样式1 加粗，居中 标题
		$styleTitle	= array(
		  'font' => array(
			'bold' => true,
			'size'=>14,
			'color'=>array(
			  'argb' => '00000000',
			),
		  ),
		  'alignment' => array(
			'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER
		  ),
		  'borders' => array(  
			'allborders' => array(  
				//'style' => PHPExcel_Style_Border::BORDER_THICK,//边框是粗的  
				'style' => PHPExcel_Style_Border::BORDER_THIN//细边框  
				//'color' => array('argb' => 'FFFF0000'),  
			) 
		  )
		);
		
		//单元格样式2 居中 正文
		$styleText	= array(
		  'font' => array(
			'size'=>12,
			'color'=>array(
			  'argb' => '00000000',
			),
		  ),
		  'alignment' => array(
			'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			'wraptext' => true
		  ),
		  'borders' => array(  
			'allborders' => array(  
				//'style' => PHPExcel_Style_Border::BORDER_THICK,//边框是粗的  
				'style' => PHPExcel_Style_Border::BORDER_THIN//细边框  
				//'color' => array('argb' => 'FFFF0000'),  
			) 
		  )
		);
		
		//单元格样式3 居中 TH
		$styleTh = array(
		  'font' => array(
			'bold' => true,
			'size'=>12,
			'color'=>array(
			  'argb' => '00000000',
			),
		  ),
		  'alignment' => array(
			'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
		  ),
		  'borders' => array(  
			'allborders' => array(  
				//'style' => PHPExcel_Style_Border::BORDER_THICK//边框是粗的  
				'style' => PHPExcel_Style_Border::BORDER_THIN//细边框  
				//'color' => array('argb' => 'FFFF0000'),  
			) 
		  )
		);
		
		//标题设置
		//合并单元格 
		$objActSheet->mergeCells('A1:'.$colLetter.'1'); 
		//设置单元格高度
		$objActSheet->getRowDimension('1')->setRowHeight(30);
		//设置单元格样式
		$objActSheet->getStyle('A1')->applyFromArray($styleTitle);
		//标题内容
		$objActSheet->setCellValue("A1",$title);
		//设置单元格边框 
		//$objA1 = $objActSheet->getStyle('A1');
		//$objA1->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN); 
		//$objA1->getTop()->getColor()->setARGB('FFFF0000'); // color 
		//$objA1->getBottom()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN); 
		//$objA1->getLeft()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN); 
		//$objA1->getRight()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN); 
		
		//第一行
		//设置单元格样式
		$objActSheet->getStyle('A2:'.$colLetter.'2')->applyFromArray($styleTh);
		
		for($i=0;$i<$colNum;$i++){
			$colLetter = getLetterByNum($i);
			$colKey = $colKeyArray[$i];
			$colName = $colNameArray[$i];
			$colValue = $colNameArray[$i];
			
			//设置所有列宽度
			$objActSheet->getColumnDimension($colLetter)->setWidth(30); 
			
			$objActSheet->setCellValue($colLetter."2",$colValue);
		}
		
		//设置单元格内容
		//设置单元格样式
		$objActSheet->getStyle('A3:'.$colLetter.$rowNum)->applyFromArray($styleText);
		//行号
		$index = 3;
		//遍历行
		for($j=0;$j<$rowNum;$j++){
			//由PHPExcel根据传入内容自动判断单元格内容类型 
			$v = $array[$j];
			
			//遍历列
			for($i=0;$i<$colNum;$i++){
				$colLetter = getLetterByNum($i);
				$colKey = $colKeyArray[$i];
				$colName = $colNameArray[$i];
				$colValue = $v[$colKey];
				$colValue = str_replace("<br>", "\n", $colValue);
				
				$objActSheet->setCellValue($colLetter.$index,$colValue);
				//$objActSheet ->getStyle($colLetter1.$index)->getAlignment()->setWrapText(true);
			}
			
			$index++;	
		}
		
		//输出内容 
		$outputFileName = $title.".xlsx"; 
		
		ob_end_clean();
		header("Content-Type: application/force-download"); 
		header("Content-Type: application/octet-stream"); 
		header("Content-Type: application/download"); 
		header('Content-Disposition:inline;filename="'.$outputFileName.'"'); 
		header("Content-Transfer-Encoding: binary"); 
		header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT"); 
		header("Cache-Control: must-revalidate, post-check=0, pre-check=0"); 
		header("Pragma: no-cache"); 
		$objWriter->save('php://output'); 
	}
	
	function getLetterByNum($num){
		switch($num){
			case 0 : return 'A';
			break;
			case 1 : return 'B';
			break;
			case 2 : return 'C';
			break;
			case 3 : return 'D';
			break;
			case 4 : return 'E';
			break;
			case 5 : return 'F';
			break;
			case 6 : return 'G';
			break;
			case 7 : return 'H';
			break;
			case 8 : return 'I';
			break;
			case 9 : return 'J';
			break;
			case 10 : return 'K';
			break;
			case 11 : return 'L';
			break;
			case 12 : return 'M';
			break;
			case 13 : return 'N';
			break;
			case 14 : return 'O';
			break;
			case 15 : return 'P';
			break;
			case 16 : return 'Q';
			break;
			case 17 : return 'R';
			break;
			case 18 : return 'S';
			break;
			case 19 : return 'T';
			break;
			case 20 : return 'U';
			break;
			case 21 : return 'V';
			break;
			case 22 : return 'W';
			break;
			case 23 : return 'X';
			break;
			case 24 : return 'Y';
			break;
			case 25 : return 'Z';
			break;
		}
	}
?>